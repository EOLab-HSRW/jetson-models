<blocks app="Snap! 10.1-dev, https://snap.berkeley.edu" version="2"><palette><category name="Jetson" color="0,116,143,1"/></palette><block-definition s="$camera snap" type="reporter" category="Jetson"><comment x="0" y="0" w="215.99999999999997" collapsed="false">takes a snapshot with the webcam and reports it as a new costume, or zero if the user cancels</comment><header></header><code></code><translations>pt:$camera a imagem actual do vídeo&#xD;pl:$camera zdjęcie&#xD;</translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>callback</l><l>pic</l></list></block><block s="doSetVar"><l>callback</l><block s="reportApplyExtension"><l>mda_snap</l><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block s="reifyScript"><script><block s="doSetVar"><l>pic</l><block s="evaluate"><block var="callback"/><list></list></block></block><block s="doReport"><block s="reportNot"><block s="reportVariadicEquals"><list><block var="pic"/><block s="reportBoolean"><l><bool>false</bool></l></block></list></block></block></block></script><list></list></block><list></list></block></block><block s="doReport"><block var="pic"/></block></script></block-definition><block-definition s="connet to %&apos;ip&apos; port %&apos;port&apos; endpoint %&apos;endpoint&apos;" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1">0.0.0.0</input><input type="%txt" initial="1">5000</input><input type="%txt" initial="1">/models</input></inputs><script><block s="doDeclareVariables"><list><l>done</l><l>socket</l></list></block><block s="doSetVar"><l>done</l><block s="reportBoolean"><l><bool>false</bool></l></block></block><block s="doRun"><block s="reportJSFunction"><list><l>ip</l><l>port</l><l>endpoint</l><l>proc</l></list><l>const url = `ws://${ip}:${port}${endpoint}`;&#xD;const socket = new WebSocket(url);&#xD;&#xD;socket.onopen = () =&gt; {&#xD;    proc.context.variables.parentFrame.setVar("socket", socket);&#xD;    proc.context.variables.parentFrame.setVar("done", true);&#xD;};</l></block><list><block var="ip"/><block var="port"/><block var="endpoint"/></list></block><block s="doWaitUntil"><block var="done"/></block><block s="doReport"><block var="socket"/></block></script></block-definition><block-definition s="encode base64 to %&apos;image&apos;" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%obj" initial="1"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>image</l></list><l>try {&#xD;    // Handle Snap! costume or image object&#xD;    if (image &amp;&amp; image.contents) {&#xD;        image = image.contents; // Use the internal contents of the costume&#xD;    }&#xD;&#xD;    if (!(image instanceof HTMLCanvasElement || image instanceof HTMLImageElement)) {&#xD;        return 0; // Unsupported image type&#xD;    }&#xD;&#xD;    // Create a canvas element&#xD;    const canvas = document.createElement(&apos;canvas&apos;);&#xD;    const ctx = canvas.getContext(&apos;2d&apos;);&#xD;&#xD;    // Draw the image onto the canvas&#xD;    ctx.drawImage(image, 0, 0);&#xD;&#xD;    // Convert to Base64&#xD;    const base64WithPrefix = canvas.toDataURL(&apos;image/jpeg&apos;);&#xD;&#xD;    // Remove the prefix "data:image/jpeg;base64,"&#xD;    const base64 = base64WithPrefix.replace(/^data:image\/jpeg;base64,/, &apos;&apos;);&#xD;&#xD;    return base64;&#xD;} catch (err) {&#xD;    return err;&#xD;}</l></block><list><block var="image"/></list></block></block></script></block-definition><block-definition s="send msg %&apos;msg&apos; to %&apos;socket&apos; with response" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1">json_msg</input><input type="%obj" initial="1"></input></inputs><script><block s="doDeclareVariables"><list><l>done</l><l>response</l></list></block><block s="doSetVar"><l>done</l><block s="reportBoolean"><l><bool>false</bool></l></block></block><block s="doRun"><block s="reportJSFunction"><list><l>msg</l><l>socket</l></list><l>socket.send(msg);</l></block><list><block var="msg"/><block var="socket"/></list></block><block s="doRun"><block s="reportJSFunction"><list><l>socket</l><l>proc</l></list><l>socket.onmessage = (event) =&gt; {&#xD;    proc.context.variables.parentFrame.setVar("response", event.data);&#xD;    proc.context.variables.parentFrame.setVar("done", true);&#xD;};</l></block><list><block var="socket"/></list></block><block s="doWaitUntil"><block var="done"/></block><block s="doReport"><block s="reportTextSplit"><block var="response"/><l><option>json</option></l></block></block></script></block-definition><block-definition s="send msg %&apos;msg&apos; to %&apos;socket&apos; without response" type="command" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1">json_msg</input><input type="%obj" initial="1"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>msg</l><l>socket</l></list><l>socket.send(msg);</l></block><list><block var="msg"/><block var="socket"/></list></block></script></block-definition><block-definition s="send img %&apos;img&apos; to %&apos;socket&apos; to model %&apos;model_id&apos; with response" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1">base64_img</input><input type="%obj" initial="1"></input><input type="%n" initial="1">1000</input></inputs><script><block s="doDeclareVariables"><list><l>msg</l></list></block><block s="doRun"><block s="reportJSFunction"><list><l>model_id</l><l>img</l><l>proc</l></list><l>let jsonObject = {&#xD;  "model_id": Number(model_id),&#xD;  "image": img&#xD;};&#xD;&#xD;let jsonString = JSON.stringify(jsonObject);&#xD;&#xD;proc.context.variables.parentFrame.setVar("msg", jsonString);</l></block><list><block var="model_id"/><block var="img"/></list></block><block s="doReport"><custom-block s="send msg %txt to %obj with response"><block var="msg"/><block var="socket"/></custom-block></block></script></block-definition></blocks>