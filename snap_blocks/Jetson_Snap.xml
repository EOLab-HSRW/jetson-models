<blocks app="Snap! 10.1-dev, https://snap.berkeley.edu" version="2"><palette><category name="Jetson" color="0,116,143,1"/></palette><block-definition s="$camera snap" type="reporter" category="Jetson"><comment x="0" y="0" w="215.99999999999997" collapsed="false">takes a snapshot with the webcam and reports it as a new costume, or zero if the user cancels</comment><header></header><code></code><translations>pt:$camera a imagem actual do vídeo&#xD;pl:$camera zdjęcie&#xD;</translations><inputs></inputs><script><block s="doDeclareVariables"><list><l>callback</l><l>pic</l></list></block><block s="doSetVar"><l>callback</l><block s="reportApplyExtension"><l>mda_snap</l><list></list></block></block><block s="doWaitUntil"><block s="evaluate"><block s="reifyScript"><script><block s="doSetVar"><l>pic</l><block s="evaluate"><block var="callback"/><list></list></block></block><block s="doReport"><block s="reportNot"><block s="reportVariadicEquals"><list><block var="pic"/><block s="reportBoolean"><l><bool>false</bool></l></block></list></block></block></block></script><list></list></block><list></list></block></block><block s="doReport"><block var="pic"/></block></script></block-definition><block-definition s="connet to %&apos;ip&apos; port %&apos;port&apos; endpoint %&apos;endpoint&apos;" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1">0.0.0.0</input><input type="%txt" initial="1">5000</input><input type="%txt" initial="1"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>ip</l><l>port</l><l>endpoint</l></list><l>const url = `ws://${ip}:${port}${endpoint}`;&#xD;&#xD;// Create WebSocket connection&#xD;const socket = new WebSocket(url);&#xD;return socket;</l></block><list><block var="ip"/><block var="port"/><block var="endpoint"/></list></block></block></script></block-definition><block-definition s="encode base64 to %&apos;image&apos;" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%s" initial="1"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>image</l></list><l>try {&#xD;            // Handle Snap! costume or image object&#xD;            if (image &amp;&amp; image.contents) {&#xD;                image = image.contents; // Use the internal contents of the costume&#xD;            }&#xD;&#xD;            if (!(image instanceof HTMLCanvasElement || image instanceof HTMLImageElement)) {&#xD;                return &apos;Unsupported image type&apos;;&#xD;            }&#xD;&#xD;            // Create a canvas element&#xD;            const canvas = document.createElement(&apos;canvas&apos;);&#xD;            const ctx = canvas.getContext(&apos;2d&apos;);&#xD;&#xD;            // Get the dimensions of the image&#xD;            const width = image.width || 480; // default width&#xD;            const height = image.height || 360; // default height&#xD;&#xD;            // Set canvas size&#xD;            canvas.width = width;&#xD;            canvas.height = height;&#xD;&#xD;            // Draw the image onto the canvas&#xD;            ctx.drawImage(image, 0, 0, width, height);&#xD;&#xD;            // Convert to Base64&#xD;            const base64 = canvas.toDataURL(&apos;image/png&apos;);&#xD;            return base64;&#xD;        } catch (err) {&#xD;            return err;&#xD;        }</l></block><list><block var="image"/></list></block></block></script></block-definition><block-definition s="send msg %&apos;msg&apos; to %&apos;socket&apos; with response" type="reporter" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1"></input><input type="%s" initial="1"></input></inputs><script><block s="doReport"><block s="evaluate"><block s="reportJSFunction"><list><l>msg</l><l>socket</l></list><l>socket.send(msg);&#xD;return socket.response;</l></block><list><block var="msg"/><block var="socket"/></list></block></block></script></block-definition><block-definition s="send msg %&apos;msg&apos; to %&apos;socket&apos; without response" type="command" category="Jetson"><header></header><code></code><translations></translations><inputs><input type="%txt" initial="1"></input><input type="%s" initial="1"></input></inputs><script><block s="doRun"><block s="reportJSFunction"><list><l>msg</l><l>socket</l></list><l>socket.send(msg);</l></block><list><block var="msg"/><block var="socket"/></list></block></script></block-definition></blocks>